{"version":3,"sources":["base.js","Components/Schedule.js","Components/Home.js","Auth.js","PrivateRoute.js","Components/Login.js","Components/SignUp.js","Components/NavBar.js","Components/DatePick.js","Components/ClassModal.js","Components/Classes.js","Components/ClassCard.js","Components/CoachClassCard.js","Components/Profile.js","Components/CreateClass.js","Components/Client.js","Components/Clients.js","Components/CardSection.js","Components/CheckoutForm.js","Components/BuyPasses.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","REACT_APP_FIREBASE_SENDER_ID","measurementId","REACT_APP_MEASUREMENT_ID","Schedule","this","props","show","toggleShow","position","open","closeBtn","closeOnEsc","onClose","closeOnOverlay","className","to","href","Component","IG","require","Home","state","currentUser","instaPosts","showSchedule","setState","ReactGA","event","category","action","user","first_name","last_name","initialize","pageview","auth","onAuthStateChanged","setUser","profile","then","SlicedPosts","slice","onClick","map","post","node","shortcode","alt","id","src","display_url","AuthContext","React","createContext","AuthProvider","children","useState","setCurrentUser","useEffect","Provider","value","PrivateRoute","RouteComponent","component","rest","useContext","render","routeProps","Login","email","password","passwordResetEmail","emailSent","emailError","handlelogin","a","signInWithEmailAndPassword","alert","handleChange","target","name","handlePasswordResetEmailChange","sendPasswordResetEmail","checkAccount","resp","fetch","json","onChange","type","placeholder","withRouter","SignUp","firstName","lastName","passwordConfirm","passwordMatchError","emptyFieldsError","handleSignUp","createUserWithEmailAndPassword","method","headers","body","JSON","stringify","tokens","coach","console","log","handleSetUser","emailVerified","sendEmailVerification","NavBar","page","handleActiveBtnChange","e","userData","window","location","pathname","logout","DatePick","date","handleOffset","ClassModal","clients","error","handleBookandUnBookClass","isBooked","find","client","undefined","length","user_id","session_id","ClientsWithNewBooking","deductToken","deletedBooking","filter","addToken","oneClass","now","Date","isInPast","time","class","style","width","toFixed","description","split","sentence","today","dd","getDate","mm","getMonth","todaydate","getFullYear","Classes","classes","chosenClass","isLoading","handleDateChange","dateFetch","handlePickClass","pickedClass","handleDayOffset","offset","d","prev","setDate","toISOString","filteredClasses","ClassCard","handleCancelBooking","handleCancel","upcomingClass","CoachClassCard","askDeleteConfirm","editMode","classDescription","handleDeleteClass","ids","client_ids","tokenError","toggleDeleteConfirm","toggleEditMode","handleSubmit","Profile","upcomingClasses","showGetClassPasses","booking","session","handleDelete","deletedClass","orderedByDateUpcomingClasses","sort","b","CreateClass","success","errorMessage","handleCreateClass","catch","Client","submitEdit","Clients","search","allClients","handleSearch","fuzzyMatch","compareTerm","term","string","toLowerCase","compare","matches","i","indexOf","sortSearch","results","result","alphebetizedClients","localeCompare","filteredClients","CARD_ELEMENT_OPTIONS","iconStyle","hidePostalCode","base","iconColor","color","fontSize","fontFamily","fontSmoothing","invalid","CardSection","options","CheckoutForm","paymentSuccess","paymentError","paymentPending","handleNameChange","preventDefault","stripe","elements","card","getElement","CardElement","createToken","message","quantity","token","cardPayment","client_secret","clientSecret","confirmCardPayment","payment_method","billing_details","paymentIntent","status","userEmail","user_email","setTimeout","resetQuantity","onSubmit","required","stripePromise","loadStripe","BuyPasses","purchaseAmountLimit","handleQuantityChange","amount","App","handleLogout","signOut","exact","path","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7b08e26.chunk.js","sourcesContent":["import * as firebase from 'firebase/app'\nimport 'firebase/auth'\n\nconst app = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n});\n\nexport default app;","import React, { Component } from 'react'\nimport PopPop from 'react-poppop';\nimport './Schedule.css';\nimport { Link } from 'react-router-dom';\n\nexport default class Schedule extends Component {\n\n    render() {\n        const { show, toggleShow } = this.props\n        return (\n            <div>\n                <PopPop position=\"centerCenter\"\n                        open={show}\n                        closeBtn={true}\n                        closeOnEsc={true}\n                        onClose={() => toggleShow(false)}\n                        closeOnOverlay={true}>\n                <h1 className='schedule-title'>Schedule</h1>\n                <div className='schedule-container'>\n                    <h3 className='schedule-h3'>Classes with less than 2 people will be cancelled 2 hours before class start time</h3>\n                    <p><strong>Monday:</strong> None</p>\n                    <p><strong>Tuesday:</strong> Workout of the Day @ 18:30</p>\n                    <p><strong>Wednesday:</strong> Core360 @ 18:30</p>\n                    <p><strong>Thursday:</strong> Workout of the Day @ 18:30</p>\n                    <p><strong>Friday:</strong> None</p>\n                    <p><strong>Saturday:</strong> Mobility Class @ 10:00 & Core360 @ 10:30</p>\n                    <p><strong>Sunday:</strong> Mobility Class @ 14:30 & Workout of the Day @ 15:00</p>\n                    <Link to='/classes'><button className='class-link'>Book a Class</button></Link>\n                    <p><strong>Email <a href='mailto:faziztraining@gmail.com'>faziztraining@gmail.com</a> if you would like to suggest a new class time</strong></p>\n                </div>\n                </PopPop>\n            </div>\n        )\n    }\n}\n   ","import React, { Component } from 'react'\nimport app from '../base'\nimport './Home.css'\nimport Schedule from './Schedule';\nimport ReactGA from 'react-ga';\nconst IG = require('instagrammer');\nconst instagramUsername = 'faziz_training';\n\nfunction initializeReactGA() {\n    ReactGA.initialize(process.env.REACT_APP_GOOGLE_MEASUREMENT_ID);\n    ReactGA.pageview('/home');\n}\n\n\nexport default class Home extends Component {\n    \n    state = {\n        currentUser: this.props.currentUser,\n        instaPosts: [],\n        showSchedule: false\n    }\n    \n    componentDidMount(){\n        initializeReactGA()\n\n        app.auth().onAuthStateChanged(function(user) {\n            if (user) {\n                setUser(user)\n            }\n        });\n    \n        const setUser = user => {\n            this.setState({currentUser: user})\n            this.props.setUser(user)\n        }\n        \n        IG.profile(instagramUsername).then((instaPosts) => {\n            this.setState({instaPosts})\n        });\n      \n    }\n\n    toggleShow = show => {\n        this.setState({showSchedule: show })\n        ReactGA.event({\n            category: 'User',\n            action: `${this.props.user.first_name + \" \" + this.props.user.last_name} checked out the Schedule`\n        });\n    }\n\n    render() {\n        const { instaPosts } = this.state\n        const SlicedPosts = instaPosts[0]? instaPosts.slice(0, 8) : []\n        return (\n            <>\n            <button onClick={() => this.toggleShow(true)} className='class-schedule-btn'>View Class Schedule</button>\n            <Schedule show={this.state.showSchedule} toggleShow={this.toggleShow}/>\n                <div className='posts-container'>\n                    <h2 className='title'>Recent Posts <a className='title' href={`https://www.instagram.com/faziz_training/`}>@faziz_training</a></h2>\n                    <div className='posts-container'>\n                        {SlicedPosts.map(post => (\n                                <a href={`https://www.instagram.com/p/${post.node.shortcode}/`} >\n                                    <img alt='' id='insta-post' className='insta-post' src={post.node.display_url} />\n                                </a>\n                        ))}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport app from './base'\n\nexport const AuthContext  = React.createContext();\n\n\nexport function AuthProvider({ children }) {\n    const  [currentUser, setCurrentUser] = useState(null);\n\n    useEffect(() => {\n        app.auth().onAuthStateChanged(setCurrentUser);\n    }, []);\n\n    return (\n        <AuthContext.Provider\n        value={{currentUser}}\n        > \n            {children}\n        </AuthContext.Provider>\n    )\n}\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from './Auth'\n\nexport default function PrivateRoute({ component: RouteComponent, ...rest }) {\n    const {currentUser} = useContext(AuthContext)\n    return (\n        <Route\n        {...rest}\n        render={routeProps =>\n        !!currentUser ? (\n            <RouteComponent {...routeProps} currentUser={currentUser} />\n        ) : (\n            <Redirect to={'/login'}/>\n        )\n        }\n        />\n    )\n}\n","import React from 'react';\nimport { withRouter, Redirect } from 'react-router';\nimport app from '../base';\nimport './Login.css'\nimport { NavLink } from 'react-router-dom'\nimport PopPop from 'react-poppop';\nimport ReactGA from 'react-ga';\n\nfunction initializeReactGA() {\n    ReactGA.initialize(process.env.REACT_APP_GOOGLE_MEASUREMENT_ID);\n    ReactGA.pageview('/login');\n}\n\n\nclass Login extends React.Component {\n\n    state = {\n        currentUser: null, \n        email: null, \n        password: null,\n        show: false,\n        passwordResetEmail: null, \n        emailSent: false,\n        emailError: false\n    }\n\n    componentDidMount(){\n        initializeReactGA()\n\n        app.auth().onAuthStateChanged(function(user) {\n            if (user) {\n                setUser(user)\n            }\n        });\n\n        const setUser = user => {\n            this.setState({currentUser: user})\n            this.props.setUser(user)\n        }\n    }\n\n    handlelogin = async () => {\n            const { email, password } = this.state;\n            try {\n                await app\n                  .auth()\n                  .signInWithEmailAndPassword(email, password);\n            } catch (error) {\n                alert(error);\n            }\n    }\n\n    toggleShow = show => {\n        this.setState({show: show});\n    }\n\n    handleChange = event => {\n        this.setState({[event.target.name]: event.target.value })\n    }\n    handlePasswordResetEmailChange = event => {\n        this.setState({[event.target.name]: event.target.value })\n    }\n\n    sendPasswordResetEmail = email => {\n        this.checkAccount(email).then(resp => {\n            if (resp) {\n                app.auth().sendPasswordResetEmail(email).then(this.setState({emailSent: true, emailError: false}))\n            } else {\n                this.setState({emailError: true})\n            }\n        })\n    }\n\n    checkAccount = email => {\n        return fetch(`https://wod-with-faris.herokuapp.com/users/check?email=${email}`)\n        .then(resp => resp.json())\n    }\n\n    render(){\n        const { currentUser, show, passwordResetEmail, emailSent, emailError } = this.state\n        if (currentUser) {\n            return <Redirect to='/'/>;\n        }\n        return (\n            <div>\n                <div className=\"form-structor\">\n                    <div className=\"signup\">\n                        <h2 className=\"form-title\" id=\"signup\"><span>or</span>Log In</h2>\n                        <div className=\"form-holder\">\n                        <input onChange={this.handleChange} name='email' type=\"email\" className=\"input\" placeholder=\"Email\" />\n                        <input onChange={this.handleChange} name='password' type=\"password\" className=\"input\" placeholder=\"Password\" />\n                        </div>\n                        <button onClick={this.handlelogin} className=\"submit-btn\">Log In</button>\n                        <h3 onClick={this.toggleShow} className='forgot-password'><u>Forgot Password</u></h3>\n                        <PopPop position=\"centerCenter\"\n                        open={show}\n                        closeBtn={true}\n                        closeOnEsc={true}\n                        onClose={() => this.toggleShow(false)}\n                        closeOnOverlay={true}>\n                            <div className='forgot-password-modal-container'>\n                                <h2 className='forgot-password-txt'>Password Reset</h2>\n                                {emailSent&& <p className='email-send-success'>Email Sent!</p>}\n                                {emailError&& <p className='email-send-error'>Sorry, no account matches this email</p>}\n                                <p className='forgot-password-txt'>Please enter the email associated with your account:</p>\n                                <input value={passwordResetEmail} onChange={this.handlePasswordResetEmailChange} name='passwordResetEmail' className='forgot-password-input' type='email'/>\n                                <button onClick={() => this.sendPasswordResetEmail(passwordResetEmail)} className='forgot-password-btn'>Send Password Reset Email</button>\n                                \n                            </div>\n                        </PopPop>\n                    </div>\n                    <div className=\"login slide-up\">\n                        <div className=\"center\">\n                            <NavLink to='/signup'>\n                                <h2 className=\"form-title\" id=\"login\"><span>or</span>Sign Up</h2>\n                            </NavLink>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default withRouter(Login);\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { Redirect } from 'react-router-dom'\nimport app from '../base';\nimport './Login.css'\nimport { NavLink } from 'react-router-dom'\nimport ReactGA from 'react-ga';\n\nfunction initializeReactGA() {\n    ReactGA.initialize(process.env.REACT_APP_GOOGLE_MEASUREMENT_ID);\n    ReactGA.pageview('/signup');\n}\n\nclass SignUp extends React.Component {\n\n    state = {\n        firstName: null,\n        lastName: null, \n        email: null,\n        password: null,\n        passwordConfirm: null,\n        currentUser: null,\n        passwordMatchError: \"\",\n        emailSent: false,\n        emptyFieldsError: null\n    }\n\n\n    componentDidMount(){\n        initializeReactGA()\n\n        app.auth().onAuthStateChanged(function(user) {\n            if (user) {\n                setUser(user)\n            }\n        });\n\n        const setUser = user => {\n            this.setState({currentUser: user})\n        }\n    }\n\n    handleSignUp = async () => {\n        const { email, password, passwordConfirm , firstName, lastName} = this.state;\n        try {\n           if (password === passwordConfirm && email !== null) { \n            await app\n            .auth()\n            .createUserWithEmailAndPassword(email, password);\n            this.setState({passwordMatchError: null, emptyFieldsError: null})\n\n            fetch(\"https://wod-with-faris.herokuapp.com/user/create\", {\n            method: \"POST\", \n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: this.state.email,\n                first_name: this.state.firstName,\n                last_name: this.state.lastName,\n                tokens: 1,\n                coach: false\n            })\n            }).then(resp => resp.json()).then(resp => console.log(resp))\n\n           } else if (!password || !passwordConfirm || !email || !firstName || !lastName){\n               this.setState({emptyFieldsError: \"Please fill all the fields\", passwordMatchError: null})\n           } else {\n            this.setState({passwordMatchError: \"Passwords do not match\", emptyFieldsError: null})\n           }\n\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    handleChange = event => {\n        this.setState({[event.target.name]: event.target.value })\n    }\n\n    handleSetUser = user => {\n        this.setState({currentUser: user})\n    }\n\n\n\n    \n    render (){\n        const {currentUser, emailSent, passwordMatchError, emptyFieldsError} = this.state\n        if (currentUser) {\n            if(!currentUser.emailVerified && !emailSent){\n                currentUser.sendEmailVerification();\n                this.setState({emailSent: true})\n            }\n            return <Redirect to='/'/>;\n        }\n        return (\n            <div>\n                <div className=\"form-structor\">\n                    <div className=\"signup\">\n                        {passwordMatchError&& <p className='sign-up-error'>{passwordMatchError}</p>}{emptyFieldsError&& <p className='sign-up-error'>{emptyFieldsError}</p>}\n                        <h2 className=\"form-title\" id=\"signup\"><span>or</span>Sign up</h2>\n                        <div className=\"form-holder\">\n                            <form>\n                                <input onChange={this.handleChange} name='firstName' type=\"text\" className=\"input\" placeholder=\"First Name\" />\n                                <input onChange={this.handleChange} name='lastName' type=\"text\" className=\"input\" placeholder=\"Last Name\" />\n                                <input onChange={this.handleChange} name='email' type=\"email\" className=\"input\" placeholder=\"Email\" />\n                                <input onChange={this.handleChange} name='password' type=\"password\" className=\"input\" placeholder=\"Password\" />\n                                <input onChange={this.handleChange} name='passwordConfirm' type=\"password\" className=\"input\" placeholder=\"Confirm Password\" />\n                            </form>\n                        </div>\n                        <button onClick={this.handleSignUp} className=\"submit-btn\">Sign up</button>\n                    </div>\n                    <div className=\"login slide-up\">\n                        <div className=\"center\">\n                            <NavLink to='/login'>\n                                <h2 className=\"form-title\" id=\"login\"><span>or</span>Log in</h2>\n                            </NavLink>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default withRouter(SignUp)\n","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport ReactGA from 'react-ga';\nimport './NavBar.css'\n\nexport default class NavBar extends Component {\n\n    state = {\n        page: null\n    }\n\n    componentDidMount() {\n        this.setState({page: window.location.pathname})\n    }\n\n    handleActiveBtnChange = (e) => {\n        if(e.target.name === '/profile' || e.target.name === '/classes'){\n            this.props.currentUser? this.setState({page: e.target.name}) : this.setState({page: '/login'})\n            this.props.userData&&\n            ReactGA.event({\n                category: 'User',\n                action: `${this.props.userData.first_name + \" \" + this.props.userData.last_name} looked at ${e.target.name}`\n            });\n        } else {\n            this.setState({page: e.target.name})\n            this.props.userData&&\n            ReactGA.event({\n                category: 'User',\n                action: `${this.props.userData.first_name + \" \" + this.props.userData.last_name} looked at ${e.target.name}`\n            });\n        }\n    }\n\n    render() {\n        const { page } = this.state \n        const { currentUser, userData } = this.props\n        return (\n            <div className='nav-bar'>\n                <NavLink to='/'>\n                    <button onClick={this.handleActiveBtnChange} name='/' className={page === '/'? 'nav-btn active' : 'nav-btn'}>Home</button>\n                </NavLink>\n                {currentUser&& userData&& userData.coach&&\n                    <NavLink to='/createclass'>\n                        <button onClick={this.handleActiveBtnChange} name='/createclass' className={page === '/createclass'? 'nav-btn active' : 'nav-btn'}>Create Class</button>\n                    </NavLink>\n                }\n                {currentUser&& userData&& userData.coach&&\n                    <NavLink to='/clients'>\n                        <button onClick={this.handleActiveBtnChange} name='/clients' className={page === '/clients'? 'nav-btn active' : 'nav-btn'}>Clients</button>\n                    </NavLink>\n                }\n                {currentUser&& userData&& !userData.coach&&\n                <NavLink to='/classes'>\n                    <button onClick={this.handleActiveBtnChange} name='/classes' className={page === '/classes'? 'nav-btn active' : 'nav-btn'}>Book Class</button>\n                </NavLink>\n                }\n                {currentUser&& userData&& !userData.coach&&\n                <NavLink to='/buypasses'>\n                    <button onClick={this.handleActiveBtnChange} name='/buypasses' className={page === '/buypasses'? 'nav-btn active' : 'nav-btn'}>Buy Passes</button>\n                </NavLink>\n                }\n                {currentUser&&\n                <NavLink to='/profile'>\n                    <button onClick={this.handleActiveBtnChange} name='/profile' className={page === '/profile'? 'nav-btn active' : 'nav-btn'}>Profile</button>\n                </NavLink >\n                }\n                {currentUser?\n                <button className='nav-btn' onClick={this.props.logout}>Log Out</button> \n                :\n                <NavLink to='/login'>\n                    <button onClick={this.handleActiveBtnChange} name='/login' className={page === '/login'? 'nav-btn active' : 'nav-btn'}>Log In</button>\n                </NavLink>\n                }\n                <h3 className='logo-2'>WOD WITH FARIS</h3>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './Classes.css'\n\nexport default class DatePick extends Component {\n\n\n\n\n  render() {\n    const { handleChange, date, handleOffset } = this.props\n    return (\n      <div className='date-picker-container'>\n        <span onClick={() => handleOffset(-1)} ><i className=\"i left\"></i></span><input onChange={handleChange} value={date} className='date-picker' type='date' name='date'/><span onClick={() => handleOffset(1)}><i className=\"i right\"></i></span>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react'\nimport PopPop from 'react-poppop';\nimport './Classes.css'\n\nexport default class ClassModal extends Component {\n    state = {\n        show: false, \n        clients: [], \n        error: null,\n      }\n\n\n    componentDidMount(){\n        fetch(`https://wod-with-faris.herokuapp.com/usersessions?class_id=${this.props.oneClass.id}`, {\n        }).then(resp => resp.json()).then(clients => this.setState({clients}))\n    }\n  \n  \n    toggleShow = show => {\n      this.setState({show: show, error: null});\n    }\n\n    handleBookandUnBookClass =  id => {\n        const isBooked = this.state.clients.find(client => client.user.id === this.props.user.id)\n        if (isBooked === undefined && this.props.user.tokens > 0 && this.state.clients.length < 8) {\n            console.log(\"booking\")\n            fetch(\"https://wod-with-faris.herokuapp.com/usersession/book\", {\n                method: \"POST\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    user_id: this.props.user.id,\n                    session_id: id\n                })\n            }).then(resp => resp.json()).then(ClientsWithNewBooking => this.setState({clients: ClientsWithNewBooking, error: null})).then(this.props.deductToken)\n            \n        } else if(isBooked && this.props.user.tokens >= 0) {\n            fetch(`https://wod-with-faris.herokuapp.com/usersession/unbook`, {\n                method: \"POST\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    user_id: this.props.user.id,\n                    session_id: id\n                })\n            }).then(resp => resp.json()).then(deletedBooking => this.setState({clients: this.state.clients.filter(client => client.user.id !== deletedBooking.user.id), error: null})).then(this.props.addToken)\n            \n        } else if (this.props.user.tokens <= 0){\n            this.setState({error: \"Sorry, you have run out of tokens\"})\n        } else if (this.state.client.length === 8) {\n            this.setState({error: \"Sorry, this class is fully booked\"})\n        }\n        \n\n    }\n\n    render() {\n        const {show, clients, error} = this.state;\n        const {oneClass} = this.props;\n        const isBooked = clients[0]&& clients.find(client => client.user.id === this.props.user.id)\n        const now = new Date()\n        const classDateAndTime = new Date(oneClass.date + \"T\" + oneClass.time)\n        const isInPast = classDateAndTime < now? true : false\n        return (\n            <div>\n                <button class=\"class-btn\" onClick={() => this.toggleShow(true)}>{oneClass.time + \" \" + oneClass.name}</button>\n                <PopPop position=\"centerCenter\"\n                        open={show}\n                        closeBtn={true}\n                        closeOnEsc={true}\n                        onClose={() => this.toggleShow(false)}\n                        closeOnOverlay={true}>\n                <h1 className='workout-title'>{oneClass.time + \" \" + oneClass.name}</h1> <div className='attending-progress-bar'><div style={{width:`${((clients.length/8) * 100).toFixed(2)}px`}}className='inner-progress-bar'><span className='attending-txt'>{clients.length === 8? \"Fully Booked\" : clients.length + \" / 8\"}</span></div></div>\n                <h3 className='desc-txt'><strong>Coach: </strong>{oneClass.coach.first_name + \" \" + oneClass.coach.last_name}</h3>\n                {oneClass.description.split('\\n').map(sentence => (\n                    <p className='desc-txt'>{sentence}</p> \n                ))\n                }\n                {!isInPast? <button onClick={() => this.handleBookandUnBookClass(this.props.oneClass.id)} class=\"book-btn\">{isBooked? \"Cancel\" : \"Book Class\"}</button> : <button class=\"past-btn\">Already Passed</button>}\n                {error&&\n                    <p className='error'>{this.state.error}</p>\n                }\n                </PopPop>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport DatePick from './DatePick'\nimport './Classes.css'\nimport ClassModal from './ClassModal'\nimport ReactGA from 'react-ga';\n\nfunction initializeReactGA() {\n    ReactGA.initialize(process.env.REACT_APP_GOOGLE_MEASUREMENT_ID);\n    ReactGA.pageview('/classes');\n}\n\nlet today = new Date()\nlet dd = today.getDate(); \nlet mm = today.getMonth() + 1; \n\nlet yyyy = today.getFullYear(); \nif (dd < 10) { \n    dd = '0' + dd; \n} \nif (mm < 10) { \n    mm = '0' + mm; \n} \nlet todaydate = yyyy + '-' + mm + '-' + dd; \n\nexport default class Classes extends Component {\n\n    state = {\n        classes: [],\n        date: todaydate, \n        chosenClass: null,\n        user: null,\n        isLoading: true\n    }\n\n    componentDidMount(){\n        initializeReactGA()\n\n        fetch(`https://wod-with-faris.herokuapp.com/sessions?date=${this.state.date}`)\n        .then(resp => resp.json())\n        .then(classes => this.setState({classes: classes, isLoading: false}))\n\n        fetch(`https://wod-with-faris.herokuapp.com/user/getuser?email=${this.props.currentUser.email}`)\n        .then(resp => resp.json())\n        .then(user => this.setState({user}))\n    }\n\n    handleDateChange = e => {\n        this.setState({\n           [e.target.name]: e.target.value,\n           isLoading: true\n        })\n        this.dateFetch(e.target.value)\n     }\n\n     handlePickClass = id => { \n        const pickedClass = this.state.classes.find( oneClass => oneClass.id === id)\n        this.setState({chosenClass: pickedClass})\n     }\n\n     deductToken = () => {\n        const { user } = this.state \n        this.setState({user: {\n            id: user.id,\n            coach: user.coach,\n            first_name: user.first_name,\n            last_name: user.last_name, \n            email: user.email,\n            tokens: user.tokens - 1\n        }})\n        ReactGA.event({\n            category: 'User',\n            action: `${this.state.user.first_name + \" \" + this.state.user.last_name} Booked a Class`\n        });\n     }\n     addToken = () => {\n        const { user } = this.state \n        this.setState({user: {\n            id: user.id,\n            coach: user.coach,\n            first_name: user.first_name,\n            last_name: user.last_name, \n            email: user.email,\n            tokens: user.tokens + 1\n        }})\n        ReactGA.event({\n            category: 'User',\n            action: `${this.state.user.first_name + \" \" + this.state.user.last_name} Cancelled a Class`\n        });\n     }\n\n    dateFetch = date => {\n        fetch(`https://wod-with-faris.herokuapp.com/sessions?date=${date}`)\n        .then(resp => resp.json())\n        .then(classes => this.setState({classes: classes, isLoading: false}))\n    }\n\n    handleDayOffset = offset => {\n        let d = new Date(this.state.date)\n        let prev = new Date(d.setDate(d.getDate() + offset)).toISOString().slice(0,10)\n        this.setState({date: prev})\n        this.dateFetch(prev)\n    }\n\n\n    render() {\n        const  { date, classes, isLoading } = this.state\n        const filteredClasses = classes.filter(oneClass => oneClass.date === date)\n        return (\n            <div>\n                <h1>Book Class</h1>\n                <DatePick  handleOffset={this.handleDayOffset} date={date} handleChange={this.handleDateChange}/>\n                <div className='container'>\n                    {isLoading&& <button className='loading'></button >}\n                    {classes[0]?\n                    filteredClasses.map(oneClass => (\n                        <ClassModal addToken={this.addToken} deductToken={this.deductToken} user={this.state.user} oneClass={oneClass} handlePickClass={this.handlePickClass}/>\n                    ))\n                    :\n                    !isLoading&& <h1>No Classes</h1>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Classes.css'\n\nexport default class ClassCard extends Component {\n\n\n    handleCancelBooking = id => {\n        fetch(`https://wod-with-faris.herokuapp.com/usersession/unbook`, {\n                method: \"POST\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    user_id: this.props.user.id,\n                    session_id: id\n                })\n            }).then(resp => resp.json()).then(deletedBooking => this.props.handleCancel(deletedBooking)).then(this.props.addToken)\n    }\n\n    render() {\n        const { upcomingClass } = this.props\n        return (\n            <div className='class-card'>\n                <h2 className='card-title'>{upcomingClass.time + \" \" + upcomingClass.name}</h2>\n                <p className='card-date'>{upcomingClass.date}</p>\n                <button onClick={() => this.handleCancelBooking(upcomingClass.id)} className='book-btn'>Cancel</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Classes.css'\nimport PopPop from 'react-poppop';\n\nexport default class CoachClassCard extends Component {\n\n    state = {\n        show: false,\n        clients: [],\n        askDeleteConfirm: false,\n        editMode: false,\n        classDescription: this.props.upcomingClass.description\n    }\n\n    handleDeleteClass = id => {\n        fetch(`https://wod-with-faris.herokuapp.com/sessions/deleted/${id}`, {\n                method: \"DELETE\"\n            }).then(resp => resp.json()).then(deletedBooking => this.props.handleCancel(deletedBooking))\n        const ids = this.state.clients.map(client => {return client.user.id})\n        fetch(\"https://wod-with-faris.herokuapp.com/sessions/returntokens\", {\n            method: \"POST\", \n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                client_ids: ids\n            })\n        }).then(this.setState({askDeleteConfirm: false}))\n    }\n\n    toggleShow = show => {\n        this.setState({show: show, tokenError: null});\n    }\n    toggleDeleteConfirm = () => {\n        this.setState({askDeleteConfirm: !this.state.askDeleteConfirm});\n    }\n\n    componentDidMount(){\n        fetch(`https://wod-with-faris.herokuapp.com/usersessions?class_id=${this.props.upcomingClass.id}`, {\n        }).then(resp => resp.json()).then(clients => this.setState({clients}))\n    }\n\n    toggleEditMode = () => {\n        this.setState({editMode: !this.state.editMode})\n    }\n\n    handleChange = e => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    handleSubmit = id => {\n        fetch(`https://wod-with-faris.herokuapp.com/sessions/update/${id}`, {\n                method: \"PATCH\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    description: this.state.classDescription\n                })\n        }).then(this.setState({editMode: false}))\n    }\n\n    render() {\n        const { upcomingClass } = this.props\n        const { show, clients, askDeleteConfirm, editMode, classDescription } = this.state\n        return (\n            <div className='coach-class-card'>\n                <h2 className='card-title'>{upcomingClass.time + \" \" + upcomingClass.name}</h2>\n                <p className='card-date'>{upcomingClass.date}</p>\n                {askDeleteConfirm? <div> <button onClick={() => this.handleDeleteClass(upcomingClass.id)} className='book-btn'>Confirm Delete</button> <button onClick={this.toggleDeleteConfirm} className='book-btn'>Cancel Delete</button> </div>: <button onClick={this.toggleDeleteConfirm} className='book-btn'>Delete Class</button>}\n                {askDeleteConfirm? undefined : <button onClick={() => this.toggleShow(true)} className='book-btn'>More Info</button>}\n                <PopPop position=\"centerCenter\"\n                        open={show}\n                        closeBtn={true}\n                        closeOnEsc={true}\n                        onClose={() => this.toggleShow(false)}\n                        closeOnOverlay={true}>\n                <h1 className='workout-title'>{upcomingClass.time + \" \" + upcomingClass.name}</h1> <div className='attending-progress-bar'><div style={{width:`${((clients.length/8) * 100).toFixed(2)}px`}}className='inner-progress-bar'><span className='attending-txt'>{clients.length === 8? \"Fully Booked\" : clients.length + \" / 8\"}</span></div></div>\n                <h3 className='desc-txt'><strong>Coach: </strong>{upcomingClass.coach.first_name + \" \" + upcomingClass.coach.last_name}</h3>\n                {!editMode?\n                classDescription.split('\\n').map(sentence => (\n                    <p className='desc-txt'>{sentence}</p> \n                ))\n                :\n                <textarea className='edit-desc' value={classDescription} onChange={this.handleChange} name='classDescription'/>\n                } \n                <div>\n                {!editMode? <button className='book-btn' onClick={this.toggleEditMode}>Edit Workout</button> : <button className='book-btn' onClick={() => this.handleSubmit(upcomingClass.id)}>Submit</button>}\n                    <h3 className='desc-txt'>Signed  Up Clients</h3>\n                    {clients.map(client => (\n                        <p className='desc-txt'>- {client.user.first_name + \" \" + client.user.last_name}</p>\n                    ))}\n                    {!clients[0]&&\n                        <p className='desc-txt'>None</p>\n                    }\n\n                </div>\n                </PopPop>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Profile.css'\nimport ClassCard from './ClassCard'\nimport CoachClassCard from './CoachClassCard'\nimport ReactGA from 'react-ga';\n\nfunction initializeReactGA() {\n    ReactGA.initialize(process.env.REACT_APP_GOOGLE_MEASUREMENT_ID);\n    ReactGA.pageview('/profile');\n}\n\nexport default class Profile extends Component {\n\n    state = {\n        user: null, \n        upcomingClasses: [],\n        showGetClassPasses: false\n    }\n\n    componentDidMount(){\n        initializeReactGA()\n        \n        fetch(`https://wod-with-faris.herokuapp.com/user/getuser?email=${this.props.currentUser.email}`)\n        .then(resp => resp.json())\n        .then(user => this.setState({user}))\n\n        fetch(`https://wod-with-faris.herokuapp.com/usersession/upcomingclasses?email=${this.props.currentUser.email}`)\n        .then(resp => resp.json())\n        .then(upcomingClasses => this.setState({upcomingClasses}))\n    }\n\n    addToken = () => {\n        const { user } = this.state \n        this.setState({user: {\n            id: user.id,\n            coach: user.coach,\n            first_name: user.first_name,\n            last_name: user.last_name, \n            email: user.email,\n            tokens: user.tokens + 1\n        }})\n     }\n\n     handleCancel = deletedBooking => {\n        this.setState({upcomingClasses: this.state.upcomingClasses.filter(booking => booking.id !== deletedBooking.session.id)})\n     }\n     handleDelete = deletedClass => {\n        this.setState({upcomingClasses: this.state.upcomingClasses.filter(booking => booking.id !== deletedClass.id)})\n     }\n\n     toggleShow = show => {\n        this.setState({showGetClassPasses: show })\n    }\n\n    render() {\n        const { user, upcomingClasses } = this.state\n        const orderedByDateUpcomingClasses = upcomingClasses[0]&& upcomingClasses.sort((a, b) => new Date(a.date) - new Date(b.date)).slice(0, 4)\n        return (\n            <div>\n                <div className='profile-container'>\n                    {user?\n                    <>\n                        <h1>{user.first_name + \" \" + user.last_name}</h1>\n                        {!user.coach&& <h2 className='tokens'>Class Passes: {user.tokens}</h2>}\n                        <div className='upcoming-classes-container'>\n                            <h2 className='upcoming-classes-title'>Upcoming Classes: </h2>\n                            {!user.coach&& upcomingClasses[0]&&\n                                orderedByDateUpcomingClasses.map(upcomingClass => (\n                                    <ClassCard handleCancel={this.handleCancel} addToken={this.addToken} user={this.state.user} upcomingClass={upcomingClass}/>\n                                ))\n                            }\n                            {user.coach&& upcomingClasses[0]&&\n                                orderedByDateUpcomingClasses.map(upcomingClass => (\n                                    <CoachClassCard handleCancel={this.handleDelete} user={this.state.user} upcomingClass={upcomingClass}/>\n                                ))\n                            }\n\n                            {!upcomingClasses[0]&&<h3 className='none'>None</h3>}\n\n                            \n                            \n                        </div>\n                    </>\n                    :\n                    <button className='loading'></button >\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './CreateClass.css'\n\nexport default class CreateClass extends Component {\n\n    state = {\n        name: null,\n        description: null,\n        date: null,\n        time: null, \n        coach: null, \n        success: false,\n        errorMessage: null\n    }\n\n    componentDidMount(){\n        fetch(`https://wod-with-faris.herokuapp.com/user/getuser?email=${this.props.currentUser.email}`)\n        .then(resp => resp.json())\n        .then(coach => this.setState({coach}))\n    }\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n         })\n    }\n\n    handleCreateClass = () => {\n        const { name, description, date, time, coach } = this.state\n        if ( name && description && date && time  ){\n        fetch(\"https://wod-with-faris.herokuapp.com/sessions/create\", {\n                method: \"POST\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: name, \n                    description: description,\n                    date: date,\n                    time: time,\n                    user_id: coach.id\n                })\n            }).then(resp => resp.json()).then(this.setState({success: true, errorMessage: null, name: \"\", description: \"\", date: \"\", time: \"\"}))\n            .catch(errorMessage => this.setState({errorMessage}))\n        } else {\n            this.setState({errorMessage: \"Please fill all fields\"})\n        }\n    } \n\n    render() {\n        const { success, errorMessage } = this.state\n        return (\n            <div>\n                <h1 className='create-class-title'>Create Class</h1>\n                {success&&\n                        <h2 className='success'>Class Created!</h2>\n                }\n                {errorMessage&&\n                        <h2 className='error-message'>{errorMessage}</h2>\n                }\n                <div className='create-class-div'>\n                    <h3 className='create-class-h3'>Name</h3>\n                    <input name='name' onChange={this.handleChange} className='create-class-input' type='text'/>\n                    <h3 className='create-class-h3' >Description</h3>\n                    <textarea name='description' onChange={this.handleChange} className='create-class-textarea'/>\n                    <h3 className='create-class-h3'>Date</h3>\n                    <input name='date' onChange={this.handleChange} className='create-class-input' type='date'/>\n                    <h3 className='create-class-h3'>Time</h3>\n                    <input name='time' onChange={this.handleChange} className='create-class-input' type='time'/>\n                    <button className='create-class-btn' onClick={this.handleCreateClass}>Create Class</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Clients.css'\nimport PopPop from 'react-poppop';\n\nexport default class Client extends Component {\n\n    state = {\n        show: false, \n        editMode: false,\n        email: this.props.client.email,\n        tokens: this.props.client.tokens\n    }\n\n    toggleShow = show => {\n        this.setState({show: show});\n    }\n    \n    toggleEditMode = () => {\n        this.setState({editMode: true})\n    }\n\n    handleChange = e => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n\n    submitEdit = id => {\n        fetch(`https://wod-with-faris.herokuapp.com/user/update/${id}`, {\n                method: \"PATCH\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    email: this.state.email,\n                    tokens: this.state.tokens\n                })\n        }).then(this.setState({editMode: false}))\n    }\n\n    render() {\n        const { client } = this.props\n        const { show, email, tokens, editMode } = this.state\n        return (\n            <div>\n                <h3 onClick={this.toggleShow}  className={tokens <=1? 'low-on-tokens-client' : 'client'}>{client.first_name + \" \" + client.last_name}</h3>\n                <PopPop position=\"centerCenter\"\n                        open={show}\n                        closeBtn={true}\n                        closeOnEsc={true}\n                        onClose={() => this.toggleShow(false)}\n                        closeOnOverlay={true}>\n                            <div className='client-modal-container'>\n                                <h3 className='client-txt'>{client.first_name + \" \" + client.last_name}</h3>\n                                <p className='client-txt'>Email: </p> {!editMode? <p className='client-txt'>{email}</p> : <input onChange={this.handleChange} className='edit-input' value={email} name='email'/>}\n                                <p className='client-txt'>Class Passes: </p> {!editMode? <p className='client-txt'>{tokens}</p> : <input onChange={this.handleChange} className='edit-input' type='number' value={tokens} name='tokens'/>}\n                                {!editMode? <button onClick={this.toggleEditMode} className='edit-btn'>Edit</button> : <button onClick={() => this.submitEdit(client.id)} className='edit-btn'>Submit</button>}\n                            </div>\n                </PopPop>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Clients.css'\nimport Client from './Client';\n\nexport default class Clients extends Component {\n\n    state = {\n        search: null,\n        allClients: []\n    }\n\n\n    componentDidMount(){\n        fetch(`https://wod-with-faris.herokuapp.com/users/index`)\n        .then(resp => resp.json())\n        .then(allClients => this.setState({allClients}))\n    }\n\n    handleSearch = e => {\n        const search = e.target.value\n        if (search.length > 0) {\n            this.setState({search})\n        } else if (search.length === 0){\n            this.setState({search: null})\n        }\n \n    }\n\n    fuzzyMatch = (compareTerm ,term) => {\n        if (term.length === 0)\n            return 1;\n        let string = compareTerm.toLowerCase();\n        let compare = term.toLowerCase();\n        let matches = 0;\n        for (let i = 0; i < compare.length; i++) {\n            string.indexOf(compare[i]) > -1 ? matches += 1 : matches -=1;\n        }\n        return matches / compareTerm.length;\n    }\n\n    sortSearch = (clients) => {\n        const results = clients.map(client => [client, this.fuzzyMatch(client.first_name + \" \" + client.last_name, this.state.search)]);\n        results.sort((a, b) => b[1] - a[1]);\n        const filteredResults = results.filter(result => result[1] > 0)\n        return filteredResults\n    }\n\n    render() {\n        const { allClients, search } = this.state\n        const alphebetizedClients = allClients.sort((a,b) =>  a.last_name.localeCompare(b.last_name))\n        console.log(alphebetizedClients)\n        const filteredClients = search? this.sortSearch(allClients) : alphebetizedClients\n        return (\n            <div>\n                <h1>Clients</h1>\n                <input className='search-bar' onChange={this.handleSearch} name='search' type='text'/>\n                <div className='clients-container'>\n                    {allClients&& allClients[0]&&\n\n                    filteredClients.map(client => (\n                        <Client client={search? client[0] : client}/>\n                    ))\n\n                    }\n                    {allClients&& !allClients[0]&&\n                        <h2>None</h2>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { CardElement } from \"@stripe/react-stripe-js\";\n\nconst CARD_ELEMENT_OPTIONS = {\n  iconStyle: \"solid\",\n  hidePostalCode: true,\n  style: {\n    base: {\n      iconColor: \"rgb(240, 57, 122)\",\n      color: \"rgb(240, 57, 122)\",\n      fontSize: \"16px\",\n      fontFamily: '\"Open Sans\", sans-serif',\n      fontSmoothing: \"antialiased\",\n      \"::placeholder\": {\n        color: \"#CFD7DF\"\n      }\n    },\n    invalid: {\n      color: \"#e5424d\",\n      \":focus\": {\n        color: \"#303238\"\n      }\n    }\n  }\n};\n\nfunction CardSection() {\n  return <CardElement options={CARD_ELEMENT_OPTIONS} />;\n}\n\nexport default CardSection","import React, { Component } from 'react'\nimport PopPop from 'react-poppop';\nimport { CardElement } from \"@stripe/react-stripe-js\"\nimport CardSection from './CardSection'\nimport './CheckoutForm.css'\n\nexport default class CheckoutForm extends Component {\n\n    state = {\n        name: \"\",\n        paymentSuccess: false, \n        paymentError: null,\n        paymentPending: false\n    }\n\n\n    handleNameChange = event => {\n        this.setState({name: event.target.value})\n    }\n\n    handleSubmit = async event => {\n        this.setState({paymentPending: true})\n        event.preventDefault();\n    \n        const { stripe, elements } = this.props;\n        if (!stripe || !elements) {\n            return;\n        }\n\n        const card = elements.getElement(CardElement);\n        const result = await stripe.createToken(card);\n        if (result.error) {\n            window.error(result.error.message);\n        } else {\n            const { quantity } = this.props\n            fetch(\"https://wod-with-faris.herokuapp.com/users/buyclasspasses\", {\n                method: \"POST\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    quantity: quantity,\n                    description: `${quantity}X Class Passes`, \n                    token: result.token.id\n                })\n            }).then(resp => resp.json()).then(resp => this.cardPayment(resp.client_secret))\n        }\n    };\n\n\n    cardPayment = async (clientSecret) => {\n        const { stripe, elements } = this.props;\n        const { name } = this.state\n\n        const result = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n              card: elements.getElement(CardElement),\n              billing_details: {\n                name: name,\n              },\n            }\n    })\n\n        if (result.error) {\n            this.setState({paymentPending: false, paymentError: result.error.message})\n          } else {\n            if (result.paymentIntent.status === 'succeeded') {\n                this.setState({paymentPending: false, paymentSuccess: true, paymentError: null})\n                \n                const { quantity, userEmail } = this.props\n                fetch(\"https://wod-with-faris.herokuapp.com/users/addclasspasses\", {\n                method: \"POST\", \n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    quantity: quantity,\n                    user_email: userEmail\n                })\n            }).then(\n                setTimeout(() => {\n                    this.setState({paymentSuccess: false})\n                    this.props.toggleShow(false)\n                    this.props.resetQuantity()\n                }, 6000)\n                )\n            }\n        }\n    }\n\n    render() {\n        const { show, toggleShow, quantity } = this.props\n        const { name, paymentSuccess, paymentError, paymentPending } = this.state\n        return (\n            <div>\n                <PopPop position=\"centerCenter\"\n                        open={show}\n                        closeBtn={true}\n                        closeOnEsc={false}\n                        onClose={() => toggleShow(false)}\n                        closeOnOverlay={false}>\n                <div className='checkout-form'>\n                    {paymentSuccess&&<p className='payment-success'>Payment Successful</p>}\n                    {paymentError&&<p className='payment-error'>Error: {paymentError}</p>}\n                {paymentSuccess?\n                    <h1 className='payment-success'>Thank you! {this.props.quantity}X Class Passes have been added to your account!</h1>\n                :\n                <>\n                    <div class=\"product-info\">\n                        <h3 className=\"product-title\">{quantity === 1? \"1X Class Pass\": quantity + \"X Class Passes\"}</h3>\n                        <h4 className=\"product-price\">Total: CHF {quantity * 10}</h4>\n                    </div>\n                    <form className='form' onSubmit={this.handleSubmit}>\n                        <input className='name-card-input' required value={name} onChange={this.handleNameChange} type='text' placeholder='Full Name as displayed on card'/>\n                        <CardSection/>\n                        {paymentPending? <button className='loading-spinner'> </button> : <button className=\"btn-pay\">Buy Now</button>}\n                    </form>\n                </>\n                }\n                </div>\n                </PopPop>\n            </div>\n        )\n    }\n}\n\n\n","import React, { Component } from 'react'\nimport './BuyPasses.css'\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { ElementsConsumer } from \"@stripe/react-stripe-js\"\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport CheckoutForm from './CheckoutForm';\n\nconst stripePromise = loadStripe('pk_live_4g3t1ZRoe5slZQbs5Vy3IaGe00fOR9THIq');\n\nexport default class BuyPasses extends Component {\n\n    state = {\n        quantity: 0, \n        purchaseAmountLimit: false, \n        show: false\n    }\n\n    handleQuantityChange = amount => {\n        const { quantity } = this.state\n        if (quantity > 0 && quantity < 5) {\n            this.setState({quantity: quantity + amount, purchaseAmountLimit: false})\n        } else if ( quantity === 0 && amount === 1) {\n            this.setState({quantity: 1, purchaseAmountLimit: false})\n        }else if (quantity === 5 && amount === -1) {\n            this.setState({quantity: quantity + amount, purchaseAmountLimit: false})\n        } else if (quantity === 5) {\n            this.setState({purchaseAmountLimit: true})\n        }\n    }\n\n    resetQuantity = () => {\n        this.setState({quantity: 0})\n    }\n\n    toggleShow = show => {\n        if (this.state.quantity > 0) {\n            this.setState({show: show});\n        } else if (this.state.quantity === 0) {\n            window.alert(\"Quantity of class passes must be more than 0\")\n        }\n    }\n\n    render() {\n        const { quantity, purchaseAmountLimit } = this.state\n        return (\n            <div>\n                <h1>Buy Passes</h1>\n                <div className='purchase-box'>\n                    <div>\n                        <h1 className='quantity-title'>Class Passes</h1>\n                        {purchaseAmountLimit&& <p className='limit'>Purchase limit is 5 classes</p>}\n                        <h1 className='quantity'>{quantity}</h1>\n                        <div className='buttons-container'>\n                            <button className='quantity-btn' onClick={() => this.handleQuantityChange(-1)}>-</button>\n                            <button className='quantity-btn' onClick={() => this.handleQuantityChange(1)}>+</button>\n                        </div>\n                        <h1 className='total'>Total: CHF {quantity * 10}</h1>\n                        <button onClick={() => this.toggleShow(true)} className='checkout-btn'>Checkout</button>\n                        <Elements stripe={stripePromise}>\n                        <ElementsConsumer>\n                            {({ stripe, elements }) => (\n                            <CheckoutForm resetQuantity={this.resetQuantity} userEmail={this.props.currentUser.email} show={this.state.show} toggleShow={this.toggleShow} quantity={quantity} stripe={stripe} elements={elements} />\n                            )}\n                        </ElementsConsumer>\n                        </Elements>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom'\nimport ReactGA from 'react-ga'\nimport Home from './Components/Home';\nimport PrivateRoute from './PrivateRoute';\nimport Login from './Components/Login';\nimport SignUp from './Components/SignUp';\nimport app from './base'\nimport NavBar from './Components/NavBar';\nimport Classes from './Components/Classes';\nimport Profile from './Components/Profile';\nimport CreateClass from './Components/CreateClass';\nimport Clients from './Components/Clients';\nimport BuyPasses from './Components/BuyPasses';\n\nclass App extends React.Component {\n\n  state = {\n    currentUser: null, \n    userData: null\n  }\n\n  \n  handleSetUser = user => {\n    this.setState({currentUser: user})\n    fetch(`https://wod-with-faris.herokuapp.com/user/getuser?email=${user.email}`)\n        .then(resp => resp.json())\n        .then(userData => this.setState({userData}))\n  }\n\n  handleLogout = () => {\n    ReactGA.event({\n      category: 'User',\n      action: `${this.state.userData.first_name + \" \" + this.state.userData.last_name} logged out`\n  });\n    app.auth().signOut()\n    this.setState({currentUser: null})\n  }\n\n  render() { \n    const  { currentUser, userData } = this.state\n    return (\n      <>\n        <NavBar userData={userData} logout={this.handleLogout} currentUser={currentUser}/>\n        <PrivateRoute exact path='/classes' component={Classes}/>\n        <PrivateRoute exact path='/profile' component={Profile}/>\n        <PrivateRoute exact path='/createclass' component={CreateClass}/>\n        <PrivateRoute exact path='/clients' component={Clients}/>\n        <PrivateRoute exact path='/buypasses' component={BuyPasses}/>\n        <Route exact path='/'>\n          <Home user={userData} setUser={this.handleSetUser}/>\n        </Route>\n        <Route exact path='/login'>\n          <Login setUser={this.handleSetUser}/>\n        </Route>\n        <Route exact path='/signup' component={SignUp}/>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { AuthProvider } from './Auth'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <Router>\n        <App />\n      </Router>\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}